user www-data;
worker_processes auto;

pid /run/nginx.pid;

include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections 768;
    # multi_accept on;
}

http {

    ##
    # Basic Settings
    ##

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    # server_tokens off;

    # server_names_hash_bucket_size 64;
    # server_name_in_redirect off;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    ##
    # SSL Settings
    ##

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
    ssl_prefer_server_ciphers on;

    ##
    # Logging Settings
    ##

    access_log /dev/stdout;
    error_log /dev/stderr info;

    ##
    # Gzip Settings
    ##

    gzip on;

    # gzip_vary on;
    # gzip_proxied any;
    # gzip_comp_level 6;
    # gzip_buffers 16 8k;
    # gzip_http_version 1.1;
    # gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    ##
    # Virtual Host Configs
    ##

    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    geo $internal_ip {
        default         no;
        10.0.0.0/8      yes;
        #172.16.0.0/12  yes;
        192.168.0.0/16  yes;
    }

    map $internal_ip$ssl_client_verify $access_allowed {
        "~*^yes"        yes;
        "noSUCCESS"     yes;
        default         no;
    }

    server {
        server_name     _;
        listen          80;
        listen          [::]:80;

        {{#ENABLE_HTTPS}}
            listen          443 ssl;
            listen          [::]:443 ssl;

            # Redirect
            if ($internal_ip = no) {
                set $test A;
            }
            if ($scheme = http) {
                set $test  "${test}B"; 
            }
            if ($test = AB) { 
                return 301 https://$host{{HTTPS_REDIRECT_PORT}}$request_uri;
                break; 
            }

            # SSL certificates
            ssl_certificate         /ssl/nginx.crt;
            ssl_certificate_key     /ssl/nginx.key;

            {{#SSL_CLIENT_AUTH}}
                # SSL client-authentification
                ssl_client_certificate  /ssl/client.crt;
                {{#SSL_CLIENT_AUTH_CRL}}
                    ssl_crl             /ssl/client.crl;
                {{/SSL_CLIENT_AUTH_CRL}}
                ssl_verify_client       optional;

                # Workaround for workaround
                # Setting cookies with Lua messes up the MIME type, causing html page to download instead of being openend in browser
                # see: https://github.com/openresty/openresty/issues/52
                location = / {
                    rewrite ^ /index.htm last;
                }
            {{/SSL_CLIENT_AUTH}}
        {{/ENABLE_HTTPS}}

        location / {
            root   /www;
            index  index.htm index.html;

            {{#SSL_CLIENT_AUTH}}
                if ($access_allowed = no) {
                    return 403;
                }

                # Workaround for iOS devices - Part 1
                # Websockets are not authenticated via Client-Certs in iOS
                # see:
                #   http://blog.christophermullins.com/2017/04/30/securing-homeassistant-with-client-certificates
                #   https://github.com/home-assistant/home-assistant-iOS/issues/27
                #   https://www.bountysource.com/issues/35354552-websocket-does-not-send-client-certificate
                if ($access_allowed = yes) {
                    access_by_lua_block {
                        local HMAC_SECRET = "hunter2"
                        local crypto = require "crypto"

                        if ngx.var.ssl_client_verify == "SUCCESS" then
                          client = crypto.digest("sha256", ngx.var.ssl_client_cert)
                          expires = ngx.time() + 3600

                          ngx.header["Set-Cookie"] = {
                            string.format("AccessToken=%s; path=/", crypto.hmac.digest("sha256", string.format("%s%d", client, expires), HMAC_SECRET)),
                            string.format("ClientId=%s; path=/", client),
                            string.format("AccessExpires=%d; path=/", expires)
                          }
                        end
                    }
                }
            {{/SSL_CLIENT_AUTH}}
        }

        {{#MQTT_HOST}}
            location /mqtt {
                proxy_pass          http://{{MQTT_HOST}};
                proxy_http_version  1.1;
                proxy_set_header    Upgrade        $http_upgrade;
                proxy_set_header    Connection     $connection_upgrade;

                {{#SSL_CLIENT_AUTH}}
                    # Workaround for iOS devices - Part 2
                    if ($access_allowed = no) {
                        access_by_lua_block {
                            local HMAC_SECRET = "hunter2"
                            local crypto = require "crypto"

                            if ngx.var.ssl_client_verify == "NONE" then
                              client = ngx.var.cookie_ClientId
                              client_hmac = ngx.var.cookie_AccessToken
                              access_expires = ngx.var.cookie_AccessExpires

                              if client ~= nil and client_hmac ~= nil and access_expires ~= nil then
                                hmac = crypto.hmac.digest("sha256", string.format("%s%d", client, access_expires), HMAC_SECRET)

                                if hmac ~= "" and hmac == client_hmac and tonumber(access_expires) > ngx.time() then
                                  return
                                end
                              end
                            end

                            ngx.exit(ngx.HTTP_FORBIDDEN)
                        }
                    }
                {{/SSL_CLIENT_AUTH}}
            }
        {{/MQTT_HOST}}
    }
}
